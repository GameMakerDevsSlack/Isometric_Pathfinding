<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.OBL_TILE_W = 48;
global.OBL_TILE_H = 48;

global.ISO_TILE_W = 64;
global.ISO_TILE_H = 32;
global.ISO_TILE_HALF_W = global.ISO_TILE_W * 0.5;
global.ISO_TILE_HALF_H = global.ISO_TILE_H * 0.5;
global.ISO_OFFSET_X = room_width * 0.5 - global.ISO_TILE_W;

screen_mode = 0;

grid_w = 15;
grid_h = 15;

grid = ds_grid_create( grid_w, grid_h );
mp_grid = mp_grid_create( 0, 0, grid_w, grid_h, 1, 1 );

for( var xx = 0; xx &lt; grid_w; xx++ ) {
    for( var yy = 0; yy &lt; grid_w; yy++ ) {
        
        var val = choose( 0, 0, 0, 1 );
        
        ds_grid_set( grid, xx, yy, val );
        
        if ( val ) mp_grid_add_cell( mp_grid, xx, yy );
        
    }
}

mouse_obl_x = 0;
mouse_obl_y = 0;
mouse_iso_x = 0;
mouse_iso_y = 0;
mouse_grid_x = 0;
mouse_grid_y = 0;

instance_create( 0, 0, obj_player );
obj_player.x = ( obj_player.grid_x + 0.5 ) * global.OBL_TILE_W;
obj_player.y = ( obj_player.grid_y + 0.5 ) * global.OBL_TILE_H;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_destroy( grid );
mp_grid_destroy( mp_grid );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( screen_mode == 0 ) {
    
    mouse_obl_x = mouse_x / global.OBL_TILE_W;
    mouse_obl_y = mouse_y / global.OBL_TILE_H;
    mouse_grid_x = floor( mouse_obl_x );
    mouse_grid_y = floor( mouse_obl_y );
    
} else {
    
    screen_to_isometric( mouse_x - global.ISO_TILE_HALF_W, mouse_y - global.ISO_TILE_HALF_H );
    
    mouse_iso_x = global.RETURN_ISO_X;
    mouse_iso_y = global.RETURN_ISO_Y;
    mouse_grid_x = round( mouse_iso_x );
    mouse_grid_y = round( mouse_iso_y );
    
}



if ( keyboard_check_pressed( vk_enter ) ) {
    
    screen_mode = !screen_mode;
    
    path_clear_points( obj_player.grid_path );
    path_clear_points( obj_player.obl_path );
    path_clear_points( obj_player.iso_path );
    with( obj_player ) path_end();
    
    if ( screen_mode == 0 ) {
        
        obj_player.x = ( obj_player.grid_x + 0.5 ) * global.OBL_TILE_W;
        obj_player.y = ( obj_player.grid_y + 0.5 ) * global.OBL_TILE_H;
        
    } else {
        
        isometric_to_screen( obj_player.grid_x, obj_player.grid_y );
        obj_player.x = global.RETURN_SCR_X + global.ISO_TILE_HALF_W;
        obj_player.y = global.RETURN_SCR_Y + global.ISO_TILE_HALF_H;
    
    }
}



if ( mouse_check_button( mb_right ) ) {
    
    obj_player.grid_x = mouse_grid_x;
    obj_player.grid_y = mouse_grid_y;
    
    path_clear_points( obj_player.grid_path );
    path_clear_points( obj_player.obl_path );
    path_clear_points( obj_player.iso_path );
    with( obj_player ) path_end();
    
    if ( screen_mode == 0 ) {
        
        obj_player.x = ( obj_player.grid_x + 0.5 ) * global.OBL_TILE_W;
        obj_player.y = ( obj_player.grid_y + 0.5 ) * global.OBL_TILE_H;
        
    } else {
        
        isometric_to_screen( obj_player.grid_x, obj_player.grid_y );
        obj_player.x = global.RETURN_SCR_X + global.ISO_TILE_HALF_W;
        obj_player.y = global.RETURN_SCR_Y + global.ISO_TILE_HALF_H;
    
    }
}



if ( mouse_check_button( mb_left ) ) {
    
    if ( screen_mode == 0 ) {
        var result = mp_grid_path( mp_grid, obj_player.grid_path, obj_player.grid_x, obj_player.grid_y, mouse_obl_x, mouse_obl_y, true );
    } else {
        var result = mp_grid_path( mp_grid, obj_player.grid_path, obj_player.grid_x, obj_player.grid_y, mouse_iso_x, mouse_iso_y, true );
    }
    
    if ( result ) {
        
        path_clear_points( obj_player.obl_path );
        path_assign( obj_player.obl_path, obj_player.grid_path );
        
        var size = path_get_number( obj_player.obl_path );
        for( var i = 0; i &lt; size; i++ ) {
            
            var xx = path_get_point_x( obj_player.obl_path, i );
            var yy = path_get_point_y( obj_player.obl_path, i );
            var spd = path_get_point_speed( obj_player.obl_path, i );
            
            //Move the path from the grid edge to the centre of each cell
            xx += 0.5;
            yy += 0.5;
            
            xx *= global.OBL_TILE_W;
            yy *= global.OBL_TILE_H;
            
            path_change_point( obj_player.obl_path, i, xx, yy, spd );
            
        }
        
        path_clear_points( obj_player.iso_path );
        path_assign( obj_player.iso_path, obj_player.grid_path );
        
        var size = path_get_number( obj_player.iso_path );
        for( var i = 0; i &lt; size; i++ ) {
            
            var xx = path_get_point_x( obj_player.iso_path, i );
            var yy = path_get_point_y( obj_player.iso_path, i );
            var spd = path_get_point_speed( obj_player.iso_path, i );
            
            //Move the path from the grid edge to the centre of each cell
            //There's some fudging going on here
            xx++;
            isometric_to_screen( xx, yy );
            
            path_change_point( obj_player.iso_path, i, global.RETURN_SCR_X, global.RETURN_SCR_Y, spd );
            
        }
        
    } else {
        
        path_clear_points( obj_player.grid_path );
        path_clear_points( obj_player.obl_path );
        path_clear_points( obj_player.iso_path );
        
    }
}



if ( mouse_check_button_released( mb_left ) ) {
    
    if ( screen_mode == 0 ) {
        with( obj_player ) path_start( obl_path, 5, path_action_stop, true );
    } else {
        with( obj_player ) path_start( iso_path, 5, path_action_stop, true );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( screen_mode == 0 ) {
    
    for( var xx = 0; xx &lt; grid_w; xx++ ) {
        for( var yy = 0; yy &lt; grid_h; yy++ ) {
            
            var val = ds_grid_get( grid, xx, yy );
            draw_sprite( spr_oblique, val, xx * global.OBL_TILE_W, yy * global.OBL_TILE_H );
            
        }
    }
    
    draw_sprite( spr_oblique, 3, obj_player.grid_x * global.OBL_TILE_W, obj_player.grid_y * global.OBL_TILE_H );
    draw_sprite( spr_oblique, 2, mouse_grid_x * global.OBL_TILE_W, mouse_grid_y * global.OBL_TILE_H );
    
} else {
    
    for( var xx = 0; xx &lt; grid_w; xx++ ) {
        for( var yy = 0; yy &lt; grid_h; yy++ ) {
            
            var val = ds_grid_get( grid, xx, yy );
            isometric_to_screen( xx, yy );
            draw_sprite( spr_iso, val, global.RETURN_SCR_X, global.RETURN_SCR_Y );
            
        }
    }
    
    isometric_to_screen( obj_player.grid_x, obj_player.grid_y );
    draw_sprite( spr_iso, 3, global.RETURN_SCR_X, global.RETURN_SCR_Y );
    
    isometric_to_screen( mouse_grid_x, mouse_grid_y );
    draw_sprite( spr_iso, 2, global.RETURN_SCR_X, global.RETURN_SCR_Y );

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
